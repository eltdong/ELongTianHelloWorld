/*
 * This file is part of the SDWebImage package.
 * (c) Olivier Poitrey <rs@dailymotion.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

#import "UIImageView+WebCache.h"
#import "objc/runtime.h"
#import "UIView+WebCacheOperation.h"
#import <AVFoundation/AVFoundation.h>

static char imageURLKey;

@implementation UIImageView (WebCache)

- (void)sd_setImageWithURL:(NSURL *)url {
    [self sd_setImageWithURL:url placeholderImage:nil options:0 progress:nil completed:nil];
}

- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder {
    [self sd_setImageWithURL:url placeholderImage:placeholder options:0 progress:nil completed:nil];
}

/**
 * Andrew Zhang add
 */
- (void)sd_setVedioImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder{
    [self sd_setVedioImageWithURL:url placeholderImage:placeholder options:0 progress:nil completed:nil];
}

- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options {
    [self sd_setImageWithURL:url placeholderImage:placeholder options:options progress:nil completed:nil];
}

- (void)sd_setImageWithURL:(NSURL *)url completed:(SDWebImageCompletionBlock)completedBlock {
    [self sd_setImageWithURL:url placeholderImage:nil options:0 progress:nil completed:completedBlock];
}

- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder completed:(SDWebImageCompletionBlock)completedBlock {
    [self sd_setImageWithURL:url placeholderImage:placeholder options:0 progress:nil completed:completedBlock];
}

- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options completed:(SDWebImageCompletionBlock)completedBlock {
    [self sd_setImageWithURL:url placeholderImage:placeholder options:options progress:nil completed:completedBlock];
}

- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {
    [self sd_cancelCurrentImageLoad];
    objc_setAssociatedObject(self, &imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC);

    if (!(options & SDWebImageDelayPlaceholder)) {
        dispatch_main_async_safe(^{
            self.image = placeholder;
        });
    }
    
    if (url) {
        __weak UIImageView *wself = self;
        id <SDWebImageOperation> operation = [SDWebImageManager.sharedManager downloadImageWithURL:url options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
            if (!wself) return;
            dispatch_main_sync_safe(^{
                if (!wself) return;
                if (image) {
                    wself.image = image;
                    [wself setNeedsLayout];
                } else {
                    if ((options & SDWebImageDelayPlaceholder)) {
                        wself.image = placeholder;
                        [wself setNeedsLayout];
                    }
                }
                if (completedBlock && finished) {
                    completedBlock(image, error, cacheType, url);
                }
            });
        }];
        [self sd_setImageLoadOperation:operation forKey:@"UIImageViewImageLoad"];
    } else {
        dispatch_main_async_safe(^{
            NSError *error = [NSError errorWithDomain:@"SDWebImageErrorDomain" code:-1 userInfo:@{NSLocalizedDescriptionKey : @"Trying to load a nil url"}];
            if (completedBlock) {
                completedBlock(nil, error, SDImageCacheTypeNone, url);
            }
        });
    }
}


/**
 *  Andrew Zhang ADD
 *  cut vedio image
 */

- (void)sd_setVedioImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {
    [self sd_cancelCurrentImageLoad];
    objc_setAssociatedObject(self, &imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
    
    if (!(options & SDWebImageDelayPlaceholder)) {
        dispatch_main_async_safe(^{
            self.image = placeholder;
        });
    }
    
    if (url) {
        __weak UIImageView *wself = self;
//        id <SDWebImageOperation> operation = [SDWebImageManager.sharedManager downloadImageWithURL:url options:options progress:progressBlock completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
//            if (!wself) return;
//            dispatch_main_sync_safe(^{
//                if (!wself) return;
//                if (image) {
//                    wself.image = image;
//                    [wself setNeedsLayout];
//                } else {
//                    if ((options & SDWebImageDelayPlaceholder)) {
//                        wself.image = placeholder;
//                        [wself setNeedsLayout];
//                    }
//                }
//                if (completedBlock && finished) {
//                    completedBlock(image, error, cacheType, url);
//                }
//            });
//        }];
//        [self sd_setImageLoadOperation:operation forKey:@"UIImageViewImageLoad"];
        
        if (!wself) return;
        dispatch_async(dispatch_queue_create("ANDREW_CutVedioImage", DISPATCH_CURRENT_QUEUE_LABEL), ^{
           
            NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:url];
            
            // 是否存在缓存
            if ([[SDWebImageManager sharedManager] cachedImageExistsForURL:url]) {
                
                BOOL isInMemoryCache = ([[SDImageCache sharedImageCache] imageFromMemoryCacheForKey:key] != nil);
                // 存在于cpu的cache中
                if (isInMemoryCache) {
                    UIImage  *cacheImage=[[SDImageCache sharedImageCache] imageFromMemoryCacheForKey:key];
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (cacheImage) {
                            wself.image = cacheImage;
                            [wself setNeedsLayout];
                        }
                    });
                }else{
                    UIImage  *diskImage=[[SDImageCache sharedImageCache] imageFromDiskCacheForKey:key];
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (diskImage) {
                            wself.image = diskImage;
                            [wself setNeedsLayout];
                        }
                    });
                }
   
            }else
            {
                // 根据视频的URL创建AVURLAsset
                AVURLAsset* asset = [[AVURLAsset alloc]
                                     initWithURL:url options:nil];
                // 根据AVURLAsset创建AVAssetImageGenerator对象
                AVAssetImageGenerator* gen = [[AVAssetImageGenerator alloc]
                                              initWithAsset:asset];
                gen.appliesPreferredTrackTransform = YES;
                // 定义获取0帧处的视频截图
                CMTime time = CMTimeMake(0, 10);
                NSError* error = nil;
                CMTime actualTime;
                // 获取time处的视频截图
                CGImageRef image = [gen copyCGImageAtTime:time
                                               actualTime:&actualTime error:&error];
                // 将CGImageRef转换为UIImage
                UIImage* vedioImage = [[UIImage alloc] initWithCGImage:image];
                CGImageRelease(image);
                
                dispatch_async(dispatch_queue_create("ANDREW_STOREIMAGE_QUEUE", DISPATCH_QUEUE_CONCURRENT), ^{
                   [[SDImageCache sharedImageCache] storeImage:vedioImage forKey:key toDisk:YES];
                });
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    if (vedioImage) {
                        wself.image = vedioImage;
                        [wself setNeedsLayout];
                    }
                });
            }
        });
     
    } else {
        dispatch_main_async_safe(^{
            NSError *error = [NSError errorWithDomain:@"SDWebImageErrorDomain" code:-1 userInfo:@{NSLocalizedDescriptionKey : @"Trying to load a nil url"}];
            if (completedBlock) {
                completedBlock(nil, error, SDImageCacheTypeNone, url);
            }
        });
    }
}


- (void)sd_setImageWithPreviousCachedImageWithURL:(NSURL *)url andPlaceholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock {
    NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:url];
    UIImage *lastPreviousCachedImage = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:key];
    
    [self sd_setImageWithURL:url placeholderImage:lastPreviousCachedImage ?: placeholder options:options progress:progressBlock completed:completedBlock];    
}

- (NSURL *)sd_imageURL {
    return objc_getAssociatedObject(self, &imageURLKey);
}

- (void)sd_setAnimationImagesWithURLs:(NSArray *)arrayOfURLs {
    [self sd_cancelCurrentAnimationImagesLoad];
    __weak UIImageView *wself = self;

    NSMutableArray *operationsArray = [[NSMutableArray alloc] init];

    for (NSURL *logoImageURL in arrayOfURLs) {
        id <SDWebImageOperation> operation = [SDWebImageManager.sharedManager downloadImageWithURL:logoImageURL options:0 progress:nil completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
            if (!wself) return;
            dispatch_main_sync_safe(^{
                __strong UIImageView *sself = wself;
                [sself stopAnimating];
                if (sself && image) {
                    NSMutableArray *currentImages = [[sself animationImages] mutableCopy];
                    if (!currentImages) {
                        currentImages = [[NSMutableArray alloc] init];
                    }
                    [currentImages addObject:image];

                    sself.animationImages = currentImages;
                    [sself setNeedsLayout];
                }
                [sself startAnimating];
            });
        }];
        [operationsArray addObject:operation];
    }

    [self sd_setImageLoadOperation:[NSArray arrayWithArray:operationsArray] forKey:@"UIImageViewAnimationImages"];
}

- (void)sd_cancelCurrentImageLoad {
    [self sd_cancelImageLoadOperationWithKey:@"UIImageViewImageLoad"];
}

- (void)sd_cancelCurrentAnimationImagesLoad {
    [self sd_cancelImageLoadOperationWithKey:@"UIImageViewAnimationImages"];
}

@end
