//
//  FillOrderViewController.m
//  GuoanBuyer
//
//  Created by elongtian on 15/8/19.
//  Copyright (c) 2015年 elongtian. All rights reserved.
//

#import "ELTFillOrderViewController.h"
#import "ELTEditeOrderOneCell.h"
#import "ELTEditeOrderThreeCell.h"
#import "ELTEditeOrderFourCell.h"
#import "ELTEditeOrderHeader.h"
#import "ELTMyShopCart.h"
#import "ELTShopCartCommodityModel.h"
#import "ELTShopCartCouponModel.h"
#import "ELTShopCartCouponPickView.h"
#import "ELTOrderSuccessViewController.h"
#import "ELTCommodityOrderViewController.h"
#import "ELTCommodityOrderDetailViewController.h"
#import "JSONKit.h"
#import "CommonFunc.h"
#import "ELTAddress.h"
#import "ELTCommodityListViewController.h"
#import "ELTHomeViewController.h"

@interface ELTFillOrderViewController ()<UITableViewDataSource,UITableViewDelegate,OrderSuccessViewControllerDelegate,PickViewDelegate,UITextFieldDelegate>{
    ELTShopCartCouponPickView *_pickView;//代金券pickview
    NSMutableArray *_couponArray;//每个店铺的代金券列表
    NSMutableDictionary *_selectCouponDic;//选择的优惠券
    NSInteger _section;
    NSMutableArray *_couponNameArray;//应该显示的代金券列表
    double _totalPrice;//底部总价格
    NSString *_tag;
}

@end

@implementation ELTFillOrderViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.title = @"填写订单";
    _bottomBtn.layer.cornerRadius = 5.0;
    self.priceLabel.text = [NSString stringWithFormat:@"¥ %.2f",_totalPrice];
    _totalPrice = 0;
    [self registerCell];
    [self downRequest];
}

#pragma mark - 数据请求
- (void)downRequest{
    [self.indicator startAnimatingActivit];
    [self.indicator setIndicatorType:ActivityIndicatorLogin];
    [ELRequestSingle editeOrderWithRequest:^(BOOL sucess, id objc) {
        [self.indicator LoadSuccess];
        _dataArray = objc;
        [self countTotalPrice];
        [self changeBottom];
        [self.bgTable reloadData];
        
    }];
}

#pragma mark - 注册cell
-(void)registerCell{
    
    UINib *oneCell=[UINib nibWithNibName:@"ELTEditeOrderThreeCell" bundle:nil];
    [self.bgTable registerNib:oneCell forCellReuseIdentifier:@"EditeOrderThreeCell"];
    
    UINib *twoCell=[UINib nibWithNibName:@"ELTEditeOrderFourCell" bundle:nil];
    [self.bgTable registerNib:twoCell forCellReuseIdentifier:@"EditeOrderFourCell"];
    
    UINib *threeCell=[UINib nibWithNibName:@"ELTEditeOrderOneCell" bundle:nil];
    [self.bgTable registerNib:threeCell forCellReuseIdentifier:@"EditeOrderOneCell"];
    
}

#pragma mark - tableview代理
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    if (indexPath.section == 0) {
        ELTEditeOrderOneCell *cell = [tableView dequeueReusableCellWithIdentifier:@"EditeOrderOneCell"];
        ELTAddressModel *model = [ELTAddress sharedAddress].AddressModel;
        cell.nameLabel.text = model.name;
        cell.telLabel.text = model.mobilephone;
        cell.addLabel.text = model.address;
        return cell;
    }else{
    
    ELTMyShopCart *shopCart = [_dataArray objectAtIndex:indexPath.section - 1];
    NSArray *array = shopCart.pro;
    if (indexPath.row == array.count) {
        
        ELTEditeOrderFourCell *cell = [tableView dequeueReusableCellWithIdentifier:@"EditeOrderFourCell"];
        cell.model = shopCart;
        [cell.couponBtn addTarget:self action:@selector(couponBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        cell.couponBtn.tag = indexPath.section;
        
        cell.remarkTextField.delegate = self;
        cell.remarkTextField.tag = indexPath.section;
        
        if (shopCart.couponString == NULL) {
            cell.userCouponLabel.hidden = YES;
            cell.arrowImage.hidden = YES;
            
        }else{
            cell.userCouponLabel.text = [NSString stringWithFormat:@"%ld元代金券",(long)[shopCart.couponString integerValue]];
            cell.noCouponLabel.hidden = YES;
        }
        cell.totalPriceLabel.text = shopCart.realCouponPay;
        [self changeBottom];
        return cell;
        
    }else{
        
        ELTEditeOrderThreeCell *cell = [tableView dequeueReusableCellWithIdentifier:@"EditeOrderThreeCell"];
        ELTShopCartCommodityModel *model = [shopCart.pro objectAtIndex:indexPath.row];
        cell.model = model;
        return cell;
        
    }
    }
    
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    
    ELTEditeOrderHeader *view = [[[NSBundle mainBundle]loadNibNamed:@"ELTEditeOrderHeader" owner:self options:nil]firstObject];
    if (section == 0) {
        
        view.image.hidden = YES;
        view.shopTitleLabel.hidden = YES;
        view.describLabel.hidden = YES;
        return view;
    }
        view.frame = CGRectMake(0, 0, SCREENWIDTH, 40);
        ELTMyShopCart *shopCart = [_dataArray objectAtIndex:section - 1];
        view.shopTitleLabel.text = shopCart.name;
        view.describLabel.text = [NSString stringWithFormat:@"%@分钟送达",shopCart.service_scope_id];
    return view;
    
}

-(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section{
    
    UIView *view = [[UIView alloc]initWithFrame:CGRectMake(0, 0, SCREENWIDTH, 10)];
    view.backgroundColor = UIColorFromRGB(0xf5f5f5);
    return view;
    
}

-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    if (section == 0) {
        return 0.01;
    }
    return 40;
}

-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
    
    return 10;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    if (indexPath.section == 0) {
        return 90;
    }else{
    
        ELTMyShopCart *shopCart = [_dataArray objectAtIndex:indexPath.section - 1];
        NSArray *array = shopCart.pro;
        if (indexPath.row == array.count) {
            return 200;
        }else{
            return 93;
        }
    }
    
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    
    if (section == 0) {
        return 1;
    }
    ELTMyShopCart *shopCart = [_dataArray objectAtIndex:section - 1];
    NSArray *array = shopCart.pro;
    return array.count + 1;
    
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    
    return _dataArray.count + 1;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark  - textfieldDelegate

-(void)textFieldDidEndEditing:(UITextField *)textField{
    
    ELTMyShopCart *cart = [_dataArray objectAtIndex:textField.tag - 1];
    cart.remark = textField.text;
    
}

#pragma mark - 下单成功后  我的订单按钮  跳转到我的订单页面
-(void)first:(UIButton *)button{
    
    ELTCommodityOrderViewController *view = [[ELTCommodityOrderViewController alloc]init];
    [self.navigationController pushViewController:view animated:YES];
    
}
#pragma mark - 下单成功后  继续购物按钮  跳转到购物页面
-(void)second:(UIButton *)button{
    
    //因为返回的页面有多个  此处进行判断  得到返回的具体的页面
    NSArray *array = self.navigationController.viewControllers;
    BaseViewController *view = [array objectAtIndex:array.count - 4];
    if ([view isKindOfClass:[ELTCommodityListViewController class]] || [view isKindOfClass:[ELTHomeViewController class]]) {
        [self.navigationController popToViewController:[array objectAtIndex:array.count - 4] animated:YES];
    }else{
        [self.navigationController popToViewController:[array objectAtIndex:array.count - 5] animated:YES];
    }
    
    
}

-(void)back:(id)sender{
    
    [self.navigationController popViewControllerAnimated:YES];
    
}

#pragma mark - 根据选择的代金券  改变订单的总金额
-(void)changeBottom{
    
    _totalPrice = 0;
    NSInteger totalSum = 0;
    if (_dataArray) {
        for (ELTMyShopCart *shopCart in _dataArray) {
            totalSum+=shopCart.totalsnum;
            double price = [shopCart.realCouponPay doubleValue];
            _totalPrice += price;
        }
        _priceLabel.text = [NSString stringWithFormat:@"¥ %.2f",_totalPrice];
    }
    
}

#pragma mark - 计算总价格
-(void)countTotalPrice{
    
    if ([[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]) {
        //如果本地存在储存代金券的字典  说明之前已经选择过代金券了
        NSMutableDictionary *selectCouponDic = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]];
        //将本地存储的对应店铺的代金券存储到对应的店铺模型中去  便于总额的计算
        for (ELTMyShopCart *shopCart in _dataArray) {
            if ([selectCouponDic objectForKey:shopCart.ID]) {
                NSString *couponID = [selectCouponDic objectForKey:shopCart.ID];
                for (ELTShopCartCouponModel *model in shopCart.coupon) {
                    if ([model.ID isEqualToString:couponID]) {
                        shopCart.couponString = model.content_price;
                        shopCart.realCouponPay = [NSString stringWithFormat:@"%.2f",[shopCart.realPay doubleValue] - [shopCart.couponString doubleValue]];
                        shopCart.selectCouponId = model.ID;
                    }
                }
            }
        }
    }
}

#pragma mark - 选择代金券   弹出pickview
-(void)couponBtnClick:(UIButton *)button{
    
    _section = button.tag;
    ELTMyShopCart *shopCart = [_dataArray objectAtIndex:_section - 1];
    if (shopCart.coupon.count>0) {
      [self createPickview];
    }
    
}

-(void)createPickview{
        
        [_couponNameArray removeAllObjects];
        _pickView = [[ELTShopCartCouponPickView alloc]initWithFrame:CGRectMake(0, 64, SCREENWIDTH, SCREENHEIGHT - 64)];
        _pickView.delegate = self;
        ELTMyShopCart *shopCart = [_dataArray objectAtIndex:_section - 1];
    //如果本地存在储存代金券的字典  说明之前已经选择过代金券了
        if ([[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]) {
            _selectCouponDic = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]];//将代金券取出来
            
            NSMutableArray *array = [NSMutableArray arrayWithArray:shopCart.coupon];
            //将当前操作的店铺id到代金券存储的字典里去寻找
            NSString *couponID = [_selectCouponDic objectForKey:shopCart.ID];
            
            if  (!couponID) {//如果没有找到对应的代金券 说明该店铺之前没有选择过代金券
                
                int i = 0;
                for (;i<array.count;i++) {//将请求下来的  该店铺的代金券与字典中存储的代金券进行比较  移除字典中有的代金券（说明此店的代金券，别的店已经选择过了）
                    ELTShopCartCouponModel *model = [array objectAtIndex:i];
                    for (NSString *couponID in [_selectCouponDic allValues]) {
                        if ([model.ID isEqualToString:couponID]) {
                            [array removeObject:model];
                            i = -1;
                            continue;
                        }
                    }
                    
                }
                
            }else{//如果找到对应的代金券
                
                [_selectCouponDic removeObjectForKey:shopCart.ID];
                int i = 0;
                for (;i<array.count;i++) {//将请求下来的  该店铺的代金券与字典中存储的代金券进行比较  移除字典中有的代金券（说明此店的代金券，别的店已经选择过了）
                    ELTShopCartCouponModel *model = [array objectAtIndex:i];
                    for (NSString *couponID in [_selectCouponDic allValues]) {
                        if ([model.ID isEqualToString:couponID]) {
                            [array removeObject:model];
                            i = -1;
                            continue;
                        }
                    }
                    
                }
            }
            
            _couponNameArray = array;
        }else{//存储代金券的字典不存在   直接将代金券按店铺id和代金券id作为键值对存进去
            
            for (ELTShopCartCouponModel *model in shopCart.coupon) {
                [_couponNameArray addObject:model];
            }
            
        }
        _pickView.array = _couponNameArray;
        [self.view addSubview:_pickView];
    
}

-(void)selectNum:(ELTShopCartCouponModel *)selectCoupon{
    
    ELTMyShopCart *shopCart = [_dataArray objectAtIndex:_section - 1];
    //如果本地存在储存代金券的字典  说明之前已经选择过代金券了
    if ([[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]) {
        
        NSMutableDictionary *selectCouponDic = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults]objectForKey:@"selectCouponDic"]];
        //如果代金券的优惠金额是0  说明选择的是  请选择优惠券这一项
        if ([selectCoupon.content_price isEqualToString:@"0"]) {
            if ([selectCouponDic objectForKey:shopCart.ID]) {
                [selectCouponDic removeObjectForKey:shopCart.ID];//将该店铺之前存储的代金券移除
                [[NSUserDefaults standardUserDefaults]setObject:selectCouponDic forKey:@"selectCouponDic"];
                [[NSUserDefaults standardUserDefaults]synchronize];
                shopCart.couponString = NULL;
                shopCart.realCouponPay = shopCart.realPay;
            }
            NSIndexSet *indexSet = [NSIndexSet indexSetWithIndex:_section - 1];//刷新界面
            [self.bgTable reloadSections:indexSet withRowAnimation:UITableViewRowAnimationNone];
            return;
        }
        //以该店铺的店铺id作为键名   代金券ID作为键值进行存储
        [selectCouponDic setObject:selectCoupon.ID forKey:shopCart.ID];
        for (ELTShopCartCouponModel *model in shopCart.coupon) {
            if ([model.ID isEqualToString:selectCoupon.ID]) {
                shopCart.couponString = model.content_price;//存储该店的优惠金额
            }
        }
        shopCart.realCouponPay = [NSString stringWithFormat:@"%.2f",[shopCart.realPay doubleValue] - [shopCart.couponString doubleValue]];
        [[NSUserDefaults standardUserDefaults]setObject:selectCouponDic forKey:@"selectCouponDic"];
        [[NSUserDefaults standardUserDefaults]synchronize];
        
    }else{//如果不存在本地储存代金券的字典  说明之前没有选择过代金券
        
        if ([selectCoupon.content_price isEqualToString:@"0"]) {
            return;
        }
        
        _selectCouponDic = [[NSMutableDictionary alloc]init];
        [_selectCouponDic setValue:selectCoupon.ID forKey:shopCart.ID];//新建字典  以该店铺的店铺id作为键名   代金券ID作为键值进行存储
        for (ELTShopCartCouponModel *model in shopCart.coupon) {
            if ([model.ID isEqualToString:selectCoupon.ID]) {
                shopCart.couponString = model.content_price;
                shopCart.selectCouponId = model.ID;//存储该店的优惠金额
            }
        }
        shopCart.realCouponPay = [NSString stringWithFormat:@"%.2f",[shopCart.realPay doubleValue] - [shopCart.couponString doubleValue]];
        [[NSUserDefaults standardUserDefaults]setObject:_selectCouponDic forKey:@"selectCouponDic"];
        [[NSUserDefaults standardUserDefaults]synchronize];
        
    }
    
    NSIndexSet *indexSet = [NSIndexSet indexSetWithIndex:_section];
    [self.bgTable reloadSections:indexSet withRowAnimation:UITableViewRowAnimationNone];
}

#pragma mark - 提交订单 请求接口
/**
 *  将每个店的店铺ID  备注  代金券id整合成一个字典  然后加入到数组中
 *
 *  @return
 */
-(NSMutableArray *)createJson{
    
    NSMutableArray *array = [NSMutableArray array];
    for (ELTMyShopCart *shopCart in _dataArray) {
        NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
        [dict setObject:shopCart.ID forKey:@"eshop_id"];
        [dict setObject:shopCart.remark forKey:@"order_remarks"];
        [dict setObject:shopCart.selectCouponId forKey:@"coupon_id"];
        [array addObject:dict];
    }
    return array;
}

#pragma mark --确定下单

- (IBAction)bottomClick:(id)sender {
    
    NSMutableArray *array = [self createJson];
    //转成json字符串  进行加密
    NSString *string = [array JSONString];
    NSString * base64Str = [CommonFunc base64StringFromText:string];//bade64加密
    
    ELTAddressModel *model = [ELTAddress sharedAddress].AddressModel;

    [ELRequestSingle submitOrderWithRequest:^(BOOL sucess, id objc) {
        ELTOrderSuccessViewController *view = [[ELTOrderSuccessViewController alloc]init];
        view.delegate = self;
        [self.navigationController pushViewController:view animated:YES];
    } andStore:base64Str andAddConsignee:model.name andAddPhone:model.mobilephone andAddress:model.address andAddProvince:model.province_id andAddCity:model.city_id andAddCounty:model.county_id andTown:model.town_id andVillage:model.village_id andTinyVillage:model.tinyvillage_id andHouse:model.house_id];
    
}
@end
